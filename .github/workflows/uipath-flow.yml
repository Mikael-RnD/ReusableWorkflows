# This is a basic workflow to help you get started with Actions

name: UiPath CI

# Controls when the workflow will run
on:
  # Triggers the workflow on call from other repository
  workflow_call:
    inputs:
      orchestratorUrl:
        required: true
        type: string
      orchestratorFolder:
        required: true
        type: string
    secrets:
      orchestratorTenant:
        required: true
      orchestratorApplicationId:
        required: true
      orchestratorApplicationSecret:
        required: true
      orchestratorApplicationScope:
        required: true
      organizationId:
        required: true

jobs:
  # This workflow contains a single job called "build"
  analyze:
    # The type of runner that the job will run on
    runs-on: windows-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - uses: Mikael-RnD/setup-uipath@main
      
      - uses: Mikael-RnD/UiPath-Analyze@main
        with:
          orchestratorUrl: ${{ inputs.orchestratorUrl }}
          orchestratorTenant: ${{ secrets.orchestratorTenant }}
          orchestratorFolder: ${{ inputs.orchestratorFolder }}
          orchestratorApplicationId: ${{ secrets.orchestratorApplicationId }}
          orchestratorApplicationSecret: ${{ secrets.orchestratorApplicationSecret }}
          orchestratorApplicationScope: ${{ secrets.orchestratorApplicationScope }}
          orchestratorLogicalName: ${{ secrets.organizationId }} 

  check-dependencies:
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - uses: Mikael-RnD/uipath-check-prerelease-dependencies@main
      
  tag:
    runs-on: ubuntu-latest
    needs: [check-dependencies,analyze]
    outputs: 
      release_tag: ${{ steps.bump_tag.outputs.new_tag }}
      release_upload_url: ${{ steps.automatic_release.outputs.upload_url }}
    steps: 
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
        
      - run: echo Triggered by ${{ github.event_name }} event  
        
      - name: Github Tag Bump
        id: bump_tag
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false

      - name: Automatic Releases
        id: automatic_release
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          # GitHub secret token
          repo_token: ${{ secrets.GITHUB_TOKEN}}
              # Git tag (for automatic releases)
          automatic_release_tag: ${{ steps.bump_tag.outputs.new_tag }}
          prerelease: ${{ github.event_name != 'push' }}
      - run: echo ${{ steps.automatic_release.outputs.upload_url }}
      
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    needs: tag
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - uses: Mikael-RnD/setup-uipath@main
      
      - uses: Mikael-RnD/UiPath-Pack@main
        with:
          orchestratorUrl: ${{ inputs.orchestratorUrl }}
          orchestratorTenant: ${{ secrets.orchestratorTenant }}
          orchestratorFolder: ${{ inputs.orchestratorFolder }}
          orchestratorApplicationId: ${{ secrets.orchestratorApplicationId }}
          orchestratorApplicationSecret: ${{ secrets.orchestratorApplicationSecret }}
          orchestratorApplicationScope: ${{ secrets.orchestratorApplicationScope }}
          orchestratorLogicalName: ${{ secrets.organizationId }} 
          projectVersion: ${{ needs.tag.outputs.release_tag }}
      
      #- uses: Mikael-RnD/UiPath-Test@main
      #  with:
      #    orchestratorUrl: ${{ inputs.orchestratorUrl }}
      #    orchestratorTenant: ${{ secrets.orchestratorTenant }}
      #    orchestratorFolder: ${{ inputs.orchestratorFolder }}
      #    orchestratorApplicationId: ${{ secrets.orchestratorApplicationId }}
      #    orchestratorApplicationSecret: ${{ secrets.orchestratorApplicationSecret }}
      #    orchestratorApplicationScope: ${{ secrets.orchestratorApplicationScope }}
      #    orchestratorLogicalName: ${{ secrets.organizationId }} 
          
      # Upload packages as build artifacts to be handled by deploy job
      - uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/packages
          if-no-files-found: error
          retention-days: 90
      
  deploy:
    needs: build
    runs-on: windows-latest
    steps:
      # Download .nupkg packages created in build job to GitHub workspace
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          # Artifact name
          name: artifact # optional
          # Destination path
          path: ${{github.workspace}} # optional
      
      # The UiPath CLI is installed on Runner
      - uses: Mikael-RnD/setup-uipath@main
      
      # .nupkg packages are deployed to UiPath Orchestrator
      - name: UiPath Deploy
        if: ${{ github.event_name == 'push' }}
        uses: Mikael-RnD/UiPath-Deploy@main
        with:
          orchestratorUrl: ${{ inputs.orchestratorUrl }}
          orchestratorTenant: ${{ secrets.orchestratorTenant }}
          orchestratorFolder: ${{ inputs.orchestratorFolder }}
          orchestratorApplicationId: ${{ secrets.orchestratorApplicationId }}
          orchestratorApplicationSecret: ${{ secrets.orchestratorApplicationSecret }}
          orchestratorApplicationScope: ${{ secrets.orchestratorApplicationScope }}
          orchestratorLogicalName: ${{ secrets.organizationId }} 
  
  failed_build:
    runs-on: ubuntu-latest
    needs: [tag,build,deploy]
    if: failure()
    steps:
      - uses: actions/checkout@v3
      
      - run: echo ${{ needs.tag.steps.bump_tag.outputs.new_tag }}
      
      - uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true # default: false
          tag_name: ${{ needs.tag.outputs.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  successful_build:
    runs-on: ubuntu-latest
    needs: [tag,deploy]
    if: success()
    steps:
    
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          # Artifact name
          name: artifact # optional
          # Destination path
          path: ${{github.workspace}} # optional
          
      # TODO: Find out how to use the upload URL to add packages?
      - run: echo ${{ needs.tag.outputs.release_upload_url }}
      

